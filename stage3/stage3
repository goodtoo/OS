# 操作系统开发阶段报告

## 一、项目概述
本阶段目标是建立一个能够运行在x86架构上的最小操作系统框架，实现从实模式到保护模式的切换、基本中断处理和简单的屏幕输出功能。

## 二、主要组件实现

### 1. 引导加载程序 (boot.asm)
- **功能实现**：
  - 完成16位实模式初始化（清空寄存器、设置栈）
  - 加载GDT并切换到32位保护模式
  - 初始化IDT和PIC控制器
  - 设置基本中断处理框架
  - 跳转到C语言内核入口

- **关键技术点**：
  - 使用`lgdt`指令加载全局描述符表(GDT)
  - 通过设置CR0寄存器PE位进入保护模式
  - 实现了PIC重映射（IRQ0-7映射到0x20-0x27）
  - 使用`lidt`指令加载中断描述符表(IDT)

### 2. 中断处理程序 (isr.asm)
- **功能实现**：
  - 异常处理（ISR0 - 除零错误）
  - 硬件中断处理（IRQ1 - 键盘中断）
  - 中断结束信号(EOI)发送

- **关键技术点**：
  - 使用`iret`指令正确返回中断
  - 键盘扫描码直接读取（端口0x60）
  - 通过端口0x20发送EOI信号

### 3. C语言内核 (kernel.c)
- **功能实现**：
  - 简单的屏幕输出（0xB8000文本模式显存操作）
  - 无限循环等待中断

- **关键技术点**：
  - 使用volatile指针直接访问硬件
  - 实现了基本的字符显示功能

## 三、构建系统设计
- **工具链配置**：
  - 使用i686-elf交叉编译器
  - NASM作为汇编器
  - GNU链接器和objcopy工具

- **Makefile功能**：
  - 自动化构建流程（汇编→编译→链接→生成磁盘映像）
  - 支持QEMU直接运行测试
  - 清理构建产物功能

## 四、测试结果
1. **基础功能测试**：
  
2. **中断测试**：
  
## 五、下一阶段计划
1. 完善IDT处理程序（实现全部32个异常和16个IRQ）
2. 添加简单的内存管理
3. 实现键盘输入缓冲区
4. 开发基本的控制台输出系统
5. 添加串口调试支持
